{
  "providers": {
    "openai": {
      "prompt_text": "**Task:** Assign items from a receipt (provided as a JSON list) to people based on a voice transcription.\n\n**Input:**\n1.  Voice Transcription (string)\n2.  Receipt Items (JSON list, each item has an integer 'id', 'item', 'quantity', 'price')\n\n**Output:** Return ONLY a valid JSON object (no extra text or markdown) with the following structure:\n{\n  \"assignments\": {\n    \"<person_name>\": [\n      {\"id\": <item_id>, \"quantity\": <integer_assignment_quantity>}\n    ],\n    ...\n  },\n  \"shared_items\": [\n    {\"id\": <item_id>, \"quantity\": <integer_shared_quantity>}\n  ],\n  \"unassigned_items\": [\n    {\"id\": <item_id>, \"quantity\": <integer_unassigned_quantity>}\n  ]\n}\n\n**Assignment Rules:**\n1.  Carefully parse the transcription to identify people and the items (referencing by 'id') they claim.\n2.  Include ALL people mentioned in the output JSON's \"assignments\" section (even if they claim nothing).\n3.  Every item from the input receipt list must be accounted for. Assign it to a person, list it under \"shared_items\", or list it under \"unassigned_items\".\n4.  The sum of quantities for a specific item ID across \"assignments\", \"shared_items\", and \"unassigned_items\" must equal the original quantity of that item in the input receipt list.\n5.  If the transcription mentions item numbers, assume they correspond to the item 'id's.\n6.  If an item is mentioned but not all quantity is claimed, assign the claimed amount and put the remainder in \"unassigned_items\".\n\nReturn *only* the JSON object."
    },
    "gemini": {
      "prompt_text": "**Task:** Assign items from a receipt (provided as a JSON list) to people based on a voice transcription.\n\n**Input:**\n1.  Voice Transcription (string)\n2.  Receipt Items (JSON list, each item has an integer 'id', 'item', 'quantity', 'price')\n\n**Output:** Return ONLY a valid JSON object (no extra text or markdown) with the following structure:\n{\n  \"assignments\": {\n    \"<person_name>\": [\n      {\"id\": <item_id>, \"quantity\": <integer_assignment_quantity>}\n    ],\n    ...\n  },\n  \"shared_items\": [\n    {\"id\": <item_id>, \"quantity\": <integer_shared_quantity>}\n  ],\n  \"unassigned_items\": [\n    {\"id\": <item_id>, \"quantity\": <integer_unassigned_quantity>}\n  ]\n}\n\n**Assignment Rules:**\n1.  Carefully parse the transcription to identify people and the items (referencing by 'id') they claim.\n2.  Include ALL people mentioned in the output JSON's \"assignments\" section (even if they claim nothing).\n3.  Every item from the input receipt list must be accounted for. Assign it to a person, list it under \"shared_items\", or list it under \"unassigned_items\".\n4.  The sum of quantities for a specific item ID across \"assignments\", \"shared_items\", and \"unassigned_items\" must equal the original quantity of that item in the input receipt list.\n5.  If the transcription mentions item numbers, assume they correspond to the item 'id's.\n6.  If an item is mentioned but not all quantity is claimed, assign the claimed amount and put the remainder in \"unassigned_items\".\n\nReturn *only* the JSON object."
    }
  }
} 