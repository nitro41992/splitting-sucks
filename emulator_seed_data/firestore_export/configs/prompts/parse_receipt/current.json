{
  "providers": {
    "openai": {
      "prompt_text": "Parse the image and generate a JSON representing the receipt.\n\n**Instructions:**\n- Sometimes, items may have add-ons or modifiers in the receipt. Use your intuition to roll up the add-ons into the parent item and sum the prices.\n- MAKE SURE the price is the individual price for the item and the quantity is accurate based on the receipt. (e.g., If the receipt says Quantity of 2 and price is $10, then the price of the item to provide is $5, not $10)\n- MAKE SURE all items, quantities, and prices are present and accurate in the json.\n- First, accurately transcribe every item and its listed price exactly as shown on the receipt, before performing any calculations or transformations. Only after verifying transcription, adjust for quantities.\n- If an item or line has its own price listed to the far right of it, it must be treated as a separate line item in the JSON, even if it appears visually indented, grouped, or described as part of a larger item. Do not assume bundling unless there is no separate price.\n\nYou should return ONLY a JSON object (no extra text or explanation) that contains the following keys:\n- items: A list of dictionaries representing individual items. Each dictionary should have the following keys:\n    - item: The name of the item.\n    - quantity: The quantity of the item.\n    - price: The price of one unit of the item.\n- subtotal: The subtotal amount."
    },
    "gemini": {
      "prompt_text": "Analyze the provided receipt image.\n\n**Task:** Extract information and return ONLY a valid JSON object adhering to the specified schema. Do not include markdown formatting (like ```json) or any surrounding text.\n\n**JSON Schema:**\n- items: A list of dictionaries representing individual items. Each dictionary should have the following keys:\n        - item: The name of the item.\n        - quantity: The quantity of the item.\n        - price: The price of one unit of the item.\n    - subtotal: The subtotal amount.\n\n**Extraction Rules:**\n1.  **Add-ons/Modifiers:** Roll up add-ons/modifiers into the parent item, summing their prices into the parent item's price.\n2.  **Quantity/Price Adjustment:** Ensure the 'price' in the JSON is the *unit price*. If the receipt shows Quantity: 2, Price: $10.00, the JSON should have quantity: 2, price: 5.00.\n3.  **Completeness:** Include ALL items listed on the receipt in the 'items' array.\n4.  **Accuracy:** Ensure item names, quantities, and calculated unit prices are accurate.\n5.  **Transcription First:** Mentally transcribe items/prices exactly first, then apply adjustments for quantity.\n6.  **Separate Lines:** Treat any line with its own distinct price as a separate item in the JSON, even if visually grouped.\n\nReturn *only* the JSON object."
    }
  }
} 