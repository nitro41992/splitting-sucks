import 'package:billfie/models/receipt.dart';
import 'package:billfie/models/receipt_item.dart';
import 'package:billfie/services/firestore_service.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Added for Timestamp
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_auth_mocks/firebase_auth_mocks.dart';
import 'package:firebase_storage_mocks/firebase_storage_mocks.dart';
import 'package:flutter_test/flutter_test.dart';
// mockito is not strictly needed if firebase_auth_mocks etc. cover all direct mocking needs.
// import 'package:mockito/mockito.dart';

void main() {
  late FakeFirebaseFirestore fakeFirestoreInstance;
  late MockFirebaseAuth mockFirebaseAuth;
  late MockFirebaseStorage mockFirebaseStorage;
  late FirestoreService firestoreService;
  late MockUser mockUser;

  const String testUserId = 'test_user_id';
  const String testReceiptId = 'test_receipt_id';
  const String testItemId = 'test_item_id';

  setUp(() {
    fakeFirestoreInstance = FakeFirebaseFirestore();
    mockUser = MockUser(
      isAnonymous: false,
      uid: testUserId,
      email: 'test@example.com',
      displayName: 'Test User',
    );
    mockFirebaseAuth = MockFirebaseAuth(mockUser: mockUser, signedIn: true);
    mockFirebaseStorage = MockFirebaseStorage();

    // THIS LINE WILL CAUSE AN ERROR IF FirestoreService.test IS NOT DEFINED
    // IN lib/services/firestore_service.dart
    firestoreService = FirestoreService.test(
      db: fakeFirestoreInstance,
      auth: mockFirebaseAuth,
      storage: mockFirebaseStorage,
    );
  });

  group('FirestoreService Tests', () {
    group('saveReceipt method', () {
      test('creates new receipt when receiptId is null (Firebase generates ID)', () async {
        // Prepare test data
        final receiptData = Receipt(
          id: 'unused-will-be-generated-by-firestore', // This ID should be ignored
          status: 'draft',
          restaurantName: 'Test Store',
          createdAt: Timestamp.now(),
        ).toMap();

        // Call method under test
        final String generatedId = await firestoreService.saveReceipt(
          receiptId: null, // null means create new with generated ID
          data: receiptData,
        );

        // Verify a document was created with an ID generated by Firestore
        expect(generatedId, isNotEmpty);
        expect(generatedId, isNot('unused-will-be-generated-by-firestore'));

        // Verify document exists at correct location
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(generatedId)
            .get();

        // Verify document exists and has correct data
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'Test Store');
        expect(snapshot.data()?['metadata']?['status'], 'draft');

        // Verify timestamps were set
        expect(snapshot.data()?['metadata']?['created_at'], isNotNull);
        expect(snapshot.data()?['metadata']?['updated_at'], isNotNull);
      });

      test('updates existing receipt when receiptId is provided and document exists', () async {
        // First create a receipt to update
        final initialReceipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Initial Store Name',
          createdAt: Timestamp.fromMillisecondsSinceEpoch(1000000), // Fixed timestamp for testing
        );
        
        // Create initial document
        await firestoreService.saveReceipt(
          receiptId: initialReceipt.id, 
          data: initialReceipt.toMap()
        );
        
        // Verify initial state
        final initialSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        final initialCreatedAt = initialSnapshot.data()?['metadata']?['created_at'];
        
        // Prepare update data
        final updatedReceipt = initialReceipt.copyWith(
          restaurantName: 'Updated Store Name',
          status: 'completed',
        );
        
        // Perform update
        final updatedId = await firestoreService.saveReceipt(
          receiptId: testReceiptId,
          data: updatedReceipt.toMap(),
        );
        
        // Verify returned ID matches input
        expect(updatedId, equals(testReceiptId));
        
        // Verify document was updated
        final updatedSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        
        // Verify data updated correctly
        expect(updatedSnapshot.data()?['metadata']?['restaurant_name'], 'Updated Store Name');
        expect(updatedSnapshot.data()?['metadata']?['status'], 'completed');
        
        // Verify created_at was preserved and updated_at was set
        expect(updatedSnapshot.data()?['metadata']?['created_at'], equals(initialCreatedAt));
        expect(updatedSnapshot.data()?['metadata']?['updated_at'], isNotNull);
      });
      
      test('creates new receipt with client-provided ID when receiptId provided but doc does not exist', () async {
        // Prepare test data
        final clientProvidedId = 'client-generated-id-${DateTime.now().millisecondsSinceEpoch}';
        final receiptData = Receipt(
          id: 'unused-will-be-overridden', // This should be ignored in favor of clientProvidedId
          status: 'draft',
          restaurantName: 'Client ID Store',
          createdAt: null, // Let Firestore set this
        ).toMap();
        
        // Call saveReceipt with client-provided ID for a document that doesn't exist
        final resultId = await firestoreService.saveReceipt(
          receiptId: clientProvidedId,
          data: receiptData,
        );
        
        // Verify returned ID is the client-provided one
        expect(resultId, equals(clientProvidedId));
        
        // Verify document exists at correct path
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(clientProvidedId)
            .get();
        
        // Verify document exists with correct data
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'Client ID Store');
        expect(snapshot.data()?['metadata']?['status'], 'draft');
        
        // Verify timestamps were created
        expect(snapshot.data()?['metadata']?['created_at'], isNotNull);
        expect(snapshot.data()?['metadata']?['updated_at'], isNotNull);
      });
      
      test('uses correct path structure and data mapping', () async {
        // Setup test data with various fields to test mapping
        final originalTimestamp = Timestamp.fromMillisecondsSinceEpoch(1234567890);
        final receipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Test Store',
          imageUri: 'gs://test-bucket/test-image.jpg',
          thumbnailUri: 'gs://test-bucket/thumbnails/test-image.jpg',
          tip: 5.0,
          tax: 2.5,
          createdAt: originalTimestamp,
          people: ['Person 1', 'Person 2'],
          // Add some test data to other fields
          parseReceipt: {'totalAmount': 25.99, 'items': []},
          transcribeAudio: {'text': 'Test transcription'},
        );
        
        // Call saveReceipt
        await firestoreService.saveReceipt(
          receiptId: testReceiptId,
          data: receipt.toMap(),
        );
        
        // Get the saved document
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        
        final data = snapshot.data()!;
        
        // Verify overall document structure
        expect(data, containsPair('metadata', isA<Map>()));
        expect(data, containsPair('parse_receipt', isA<Map>()));
        expect(data, containsPair('transcribe_audio', isA<Map>()));
        
        // Verify metadata fields mapped correctly
        final metadata = data['metadata'] as Map<String, dynamic>;
        expect(metadata, containsPair('restaurant_name', 'Test Store'));
        expect(metadata, containsPair('status', 'draft'));
        expect(metadata, containsPair('image_uri', 'gs://test-bucket/test-image.jpg'));
        expect(metadata, containsPair('thumbnail_uri', 'gs://test-bucket/thumbnails/test-image.jpg'));
        expect(metadata, containsPair('tip', 5.0));
        expect(metadata, containsPair('tax', 2.5));
        expect(metadata, containsPair('created_at', originalTimestamp));
        expect(metadata, containsPair('people', ['Person 1', 'Person 2']));
        
        // Verify other major fields mapped correctly
        expect(data['parse_receipt'], containsPair('totalAmount', 25.99));
        expect(data['transcribe_audio'], containsPair('text', 'Test transcription'));
      });
    });

    group('Basic Receipt CRUD Operations', () {
      test('saveReceipt should add a new receipt to Firestore if ID is new', () async {
        final receipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Test Store',
          createdAt: Timestamp.now(),
        );
        await firestoreService.saveReceipt(receiptId: receipt.id, data: receipt.toMap());
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'Test Store');
        expect(snapshot.data()?['metadata']?['status'], 'draft');
      });

      test('getReceiptsStream should stream receipts from Firestore', () async {
        final receipt1 = Receipt(id: 'r1', status: 'draft', restaurantName: 'Store 1', createdAt: Timestamp.now());
        // Ensure unique timestamps for predictable ordering if the mock relies on it.
        final receipt2Timestamp = Timestamp.fromMillisecondsSinceEpoch(Timestamp.now().millisecondsSinceEpoch + 1000);
        final receipt2 = Receipt(id: 'r2', status: 'draft', restaurantName: 'Store 2', createdAt: receipt2Timestamp, updatedAt: receipt2Timestamp ); // also set updatedAt for ordering

        // Save with a slight delay or ensure timestamps are distinct if mock ordering is sensitive
        await firestoreService.saveReceipt(receiptId: receipt1.id, data: receipt1.toMap());
        await Future.delayed(const Duration(milliseconds: 10)); // Small delay
        await firestoreService.saveReceipt(receiptId: receipt2.id, data: receipt2.toMap());

        final stream = firestoreService.getReceiptsStream().map(
              (snapshot) => snapshot.docs.map((doc) => Receipt.fromDocumentSnapshot(doc)).toList(),
            );
        
        expectLater(stream, emitsInOrder([
          isA<List<Receipt>>()..having(
            (list) => list.any((r) => r.id == 'r1' && r.restaurantName == 'Store 1'), 
            'contains receipt1', 
            isTrue
          ),
          isA<List<Receipt>>()..having(
            (list) => list.any((r) => r.id == 'r2' && r.restaurantName == 'Store 2'), 
            'contains receipt2', 
            isTrue
          )..having((list) => list.length, 'length', greaterThanOrEqualTo(1)), // second emission should have both or just r2
        ]));
      });

      test('saveReceipt should update an existing receipt in Firestore', () async {
        final initialReceipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Old Store Name',
          createdAt: Timestamp.now(),
        );
        await firestoreService.saveReceipt(receiptId: initialReceipt.id, data: initialReceipt.toMap());

        final updatedReceipt = initialReceipt.copyWith(restaurantName: 'New Store Name', status: 'completed', updatedAt: Timestamp.now());
        await firestoreService.saveReceipt(receiptId: updatedReceipt.id, data: updatedReceipt.toMap());

        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'New Store Name');
        expect(snapshot.data()?['metadata']?['status'], 'completed');
      });

      test('deleteReceipt should remove a receipt from Firestore', () async {
        final receipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Test Store',
          createdAt: Timestamp.now(),
        );
        await firestoreService.saveReceipt(receiptId: receipt.id, data: receipt.toMap());
        await firestoreService.deleteReceipt(testReceiptId);
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        expect(snapshot.exists, isFalse);
      });
    });

    group('Receipt Items (Direct Firestore Interaction)', () {
      final testReceiptItem = ReceiptItem(
        itemId: testItemId, 
        name: 'Test Item',
        price: 10.0,
        quantity: 1,
      );

      Future<void> _ensureParentReceiptExists() async {
        final receipt = Receipt(id: testReceiptId, status: 'draft', restaurantName: 'Item Test Store', createdAt: Timestamp.now());
        await firestoreService.saveReceipt(receiptId: receipt.id, data: receipt.toMap());
      }

      test('addReceiptItem should add an item to a receipts subcollection', () async {
        await _ensureParentReceiptExists();
        await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .collection('items')
            .doc(testReceiptItem.itemId)
            .set(testReceiptItem.toJson());
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .collection('items')
            .doc(testReceiptItem.itemId)
            .get();
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['name'], 'Test Item');
      });

      test('getReceiptItems should stream items from a receipts subcollection', () async {
        await _ensureParentReceiptExists();
        final item1 = ReceiptItem(itemId: 'item1', name: 'Item 1', price: 5.0, quantity: 1);
        final item2 = ReceiptItem(itemId: 'item2', name: 'Item 2', price: 10.0, quantity: 2);
        final itemsCollection = fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .collection('items');
        await itemsCollection.doc(item1.itemId).set(item1.toJson());
        await Future.delayed(const Duration(milliseconds: 10)); // Ensure distinct operations for stream
        await itemsCollection.doc(item2.itemId).set(item2.toJson());
        final stream = itemsCollection
            .snapshots()
            .map((snapshot) => snapshot.docs.map((doc) => ReceiptItem.fromJson(doc.data()!)).toList());

        expectLater(stream, emitsInOrder([
          isA<List<ReceiptItem>>()..having(
            (list) => list.any((item) => item.itemId == 'item1'), 
            'contains item1', 
            isTrue
          ),
          isA<List<ReceiptItem>>()..having(
            (list) => list.any((item) => item.itemId == 'item2'), 
            'contains item2', 
            isTrue
          )..having((list) => list.length, 'length', greaterThanOrEqualTo(1)), 
        ]));
      });

      test('updateReceiptItem should update an existing item in a receipts subcollection', () async {
        await _ensureParentReceiptExists();
        final itemsCollection = fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .collection('items');
        await itemsCollection.doc(testReceiptItem.itemId).set(testReceiptItem.toJson());
        final updatedItem = testReceiptItem.copyWith(name: 'Updated Item Name');
        await itemsCollection.doc(updatedItem.itemId).update(updatedItem.toJson());
        final snapshot = await itemsCollection.doc(testReceiptItem.itemId).get();
        expect(snapshot.data()?['name'], 'Updated Item Name');
      });

      test('deleteReceiptItem should remove an item from a receipts subcollection', () async {
        await _ensureParentReceiptExists();
        final itemsCollection = fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .collection('items');
        await itemsCollection.doc(testReceiptItem.itemId).set(testReceiptItem.toJson());
        await itemsCollection.doc(testReceiptItem.itemId).delete();
        final snapshot = await itemsCollection.doc(testReceiptItem.itemId).get();
        expect(snapshot.exists, isFalse);
      });
    });

    // Tests for uploadImageToStorage and getImageUrl would require more complex mocking
    // for File objects and FirebaseStorage behavior if not using firebase_storage_mocks effectively.
    // For firebase_storage_mocks, you can directly interact with the mock instance.
    // Example:
    // test('uploadImageToStorage should use mockFirebaseStorage', () async {
    //   final mockFile = MockFile(); // You'd need to create a MockFile class
    //   when(mockFile.path).thenReturn('/dummy/path/image.jpg');
    //   // Configure mockFirebaseStorage as needed by your uploadReceiptImage method
    //   // e.g., mockFirebaseStorage.ref().child(any).putFile(any) ...
    //
    //   // final result = await firestoreService.uploadReceiptImage(mockFile);
    //   // expect(result, startsWith('gs://'));
    //   // verify(mockFirebaseStorage.ref().child(any).putFile(any)).called(1);
    // });

    group('saveDraft method', () {
      test('sets status to draft and calls saveReceipt with correct parameters', () async {
        // Prepare test data
        final receiptData = Receipt(
          id: testReceiptId,
          status: 'completed', // This should be overridden to 'draft'
          restaurantName: 'Draft Test Store',
          createdAt: Timestamp.now(),
        ).toMap();
        
        // Remove status to verify it gets added
        (receiptData['metadata'] as Map<String, dynamic>).remove('status');
        
        // Call saveDraft
        final savedId = await firestoreService.saveDraft(
          receiptId: testReceiptId,
          data: receiptData,
        );
        
        // Verify correct ID returned
        expect(savedId, equals(testReceiptId));
        
        // Verify document was saved with status set to 'draft'
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['metadata']?['status'], 'draft');
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'Draft Test Store');
      });
      
      test('creates a new draft with generated ID when receiptId is null', () async {
        // Prepare minimal data
        final receiptData = {'metadata': {'restaurant_name': 'New Draft Store'}};
        
        // Call saveDraft with null ID
        final generatedId = await firestoreService.saveDraft(
          receiptId: null,
          data: receiptData,
        );
        
        // Verify an ID was generated
        expect(generatedId, isNotEmpty);
        
        // Verify document exists with status 'draft'
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(generatedId)
            .get();
        
        expect(snapshot.exists, isTrue);
        expect(snapshot.data()?['metadata']?['status'], 'draft');
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'New Draft Store');
      });
    });
    
    group('completeReceipt method', () {
      test('sets status to completed and updates receipt', () async {
        // First create a draft receipt
        final draftReceipt = Receipt(
          id: testReceiptId,
          status: 'draft',
          restaurantName: 'Draft Store',
          createdAt: Timestamp.fromMillisecondsSinceEpoch(1000000), // Fixed timestamp for testing
        );
        
        await firestoreService.saveReceipt(
          receiptId: draftReceipt.id,
          data: draftReceipt.toMap(),
        );
        
        // Prepare completion data (partial data is fine, as we're updating)
        final completionData = {
          'metadata': {
            'restaurant_name': 'Completed Store',
            'tip': 5.0,
            'tax': 2.5,
          }
        };
        
        // Call completeReceipt
        final completedId = await firestoreService.completeReceipt(
          receiptId: testReceiptId,
          data: completionData,
        );
        
        // Verify ID is returned correctly
        expect(completedId, equals(testReceiptId));
        
        // Verify document was updated with status 'completed'
        final snapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc(testReceiptId)
            .get();
        
        expect(snapshot.data()?['metadata']?['status'], 'completed');
        expect(snapshot.data()?['metadata']?['restaurant_name'], 'Completed Store');
        expect(snapshot.data()?['metadata']?['tip'], 5.0);
        expect(snapshot.data()?['metadata']?['tax'], 2.5);
        
        // Verify updated_at timestamp was set
        expect(snapshot.data()?['metadata']?['updated_at'], isNotNull);
      });
      
      test('throws error if receipt does not exist', () async {
        // Attempt to complete a non-existent receipt
        final completionData = {
          'metadata': {
            'restaurant_name': 'Completed Store',
          }
        };
        
        // Expect an error to be thrown
        expect(
          () => firestoreService.completeReceipt(
            receiptId: 'non-existent-id',
            data: completionData,
          ),
          throwsA(isA<Exception>()),
        );
      });
    });

    group('getReceiptsStream method', () {
      test('returns correctly ordered stream of receipts', () async {
        // Create test receipts with different timestamps
        final now = Timestamp.now();
        final olderTimestamp = Timestamp.fromMillisecondsSinceEpoch(now.millisecondsSinceEpoch - 10000);
        final newerTimestamp = Timestamp.fromMillisecondsSinceEpoch(now.millisecondsSinceEpoch + 10000);
        
        final receipt1 = Receipt(id: 'r1', status: 'draft', restaurantName: 'Older Store', updatedAt: olderTimestamp);
        final receipt2 = Receipt(id: 'r2', status: 'completed', restaurantName: 'Newer Store', updatedAt: newerTimestamp);
        
        // Add receipts to Firestore
        await firestoreService.saveReceipt(receiptId: receipt1.id, data: receipt1.toMap());
        await firestoreService.saveReceipt(receiptId: receipt2.id, data: receipt2.toMap());
        
        // Get the stream and convert to Receipt objects
        final stream = firestoreService.getReceiptsStream()
            .map((snapshot) => snapshot.docs.map((doc) => Receipt.fromDocumentSnapshot(doc)).toList());
        
        // Get the first emission
        final receipts = await stream.first;
        
        // Verify we have the expected number of receipts
        expect(receipts.length, 2, reason: 'Should have both receipts');
        
        // Verify ordering (newer receipt first)
        // Directly check for receipt with ID 'r2' (newer) should be first in the list
        expect(receipts.first.id, 'r2', reason: 'Newer receipt should be first');
        
        // And older receipt should be second
        expect(receipts.where((r) => r.id == 'r1').isNotEmpty, isTrue, reason: 'Should contain older receipt');
      });
      
      test('emits updated results when data changes', () async {
        // Setup initial receipt
        final initialReceipt = Receipt(
          id: 'stream-test',
          status: 'draft',
          restaurantName: 'Initial Name',
          updatedAt: Timestamp.now(),
        );
        await firestoreService.saveReceipt(receiptId: initialReceipt.id, data: initialReceipt.toMap());
        
        // Listen to the stream and map to Receipt objects
        final stream = firestoreService.getReceiptsStream()
            .map((snapshot) => snapshot.docs.map((doc) => Receipt.fromDocumentSnapshot(doc)).toList());
        
        // Verify initial data
        final initialReceipts = await stream.first;
        expect(initialReceipts.length, greaterThanOrEqualTo(1), reason: 'Should have at least one receipt');
        
        // Find our test receipt
        final testReceipt = initialReceipts.firstWhere(
          (r) => r.id == 'stream-test',
          orElse: () => throw Exception('Test receipt not found'),
        );
        expect(testReceipt.restaurantName, 'Initial Name');
        
        // Update the receipt
        final updatedReceipt = initialReceipt.copyWith(
          restaurantName: 'Updated Name',
          updatedAt: Timestamp.fromMillisecondsSinceEpoch(Timestamp.now().millisecondsSinceEpoch + 1000),
        );
        await firestoreService.saveReceipt(receiptId: updatedReceipt.id, data: updatedReceipt.toMap());
        
        // Get the next emission (with updated data)
        // Use a timeout to avoid hanging the test
        final updatedReceipts = await stream.first.timeout(Duration(seconds: 2));
        
        // Find our updated receipt
        final updatedTestReceipt = updatedReceipts.firstWhere(
          (r) => r.id == 'stream-test',
          orElse: () => throw Exception('Updated test receipt not found'),
        );
        expect(updatedTestReceipt.restaurantName, 'Updated Name');
      });
    });
    
    group('getReceipts method', () {
      test('returns all receipts when no status filter is provided', () async {
        // Create receipts with different statuses
        final draft = Receipt(id: 'draft1', status: 'draft', restaurantName: 'Draft Store');
        final completed = Receipt(id: 'completed1', status: 'completed', restaurantName: 'Completed Store');
        
        await firestoreService.saveReceipt(receiptId: draft.id, data: draft.toMap());
        await firestoreService.saveReceipt(receiptId: completed.id, data: completed.toMap());
        
        // Call getReceipts without status filter
        final result = await firestoreService.getReceipts();
        
        // Should return both receipts
        expect(result.docs.isNotEmpty, isTrue, reason: 'Should have receipts');
        
        // Convert to set of IDs for easier testing
        final docIds = result.docs.map((doc) => doc.id).toSet();
        
        // Verify both receipts are included
        expect(docIds.contains('draft1'), isTrue, reason: 'Should contain draft receipt');
        expect(docIds.contains('completed1'), isTrue, reason: 'Should contain completed receipt');
      });
      
      test('returns only receipts with matching status when filter is provided', () async {
        // Create receipts with different statuses
        final draft1 = Receipt(id: 'status-draft1', status: 'draft', restaurantName: 'Draft Store 1');
        final draft2 = Receipt(id: 'status-draft2', status: 'draft', restaurantName: 'Draft Store 2');
        final completed = Receipt(id: 'status-completed1', status: 'completed', restaurantName: 'Completed Store');
        
        await firestoreService.saveReceipt(receiptId: draft1.id, data: draft1.toMap());
        await firestoreService.saveReceipt(receiptId: draft2.id, data: draft2.toMap());
        await firestoreService.saveReceipt(receiptId: completed.id, data: completed.toMap());
        
        // Call getReceipts with 'draft' status filter
        final draftResults = await firestoreService.getReceipts(status: 'draft');
        
        // Extract IDs for easier testing
        final draftIds = draftResults.docs.map((doc) => doc.id).toSet();
        
        // Should contain both draft receipts
        expect(draftIds.contains('status-draft1'), isTrue, reason: 'Should contain first draft receipt');
        expect(draftIds.contains('status-draft2'), isTrue, reason: 'Should contain second draft receipt');
        expect(draftIds.contains('status-completed1'), isFalse, reason: 'Should NOT contain completed receipt');
        
        // Call getReceipts with 'completed' status filter
        final completedResults = await firestoreService.getReceipts(status: 'completed');
        
        // Extract IDs
        final completedIds = completedResults.docs.map((doc) => doc.id).toSet();
        
        // Should only contain completed receipt
        expect(completedIds.contains('status-completed1'), isTrue, reason: 'Should contain completed receipt');
        expect(completedIds.contains('status-draft1'), isFalse, reason: 'Should NOT contain draft receipts');
        expect(completedIds.contains('status-draft2'), isFalse, reason: 'Should NOT contain draft receipts');
      });
      
      test('returns empty result when no receipts match the filter', () async {
        // Create only draft receipts
        final draft = Receipt(id: 'empty-test-draft', status: 'draft', restaurantName: 'Only Draft');
        await firestoreService.saveReceipt(receiptId: draft.id, data: draft.toMap());
        
        // Call getReceipts with 'completed' status filter (which shouldn't match)
        final result = await firestoreService.getReceipts(status: 'completed');
        
        // Should return empty results
        expect(result.docs.isEmpty, isTrue, reason: 'Should have no matching receipts');
      });
    });

    group('getReceipt method', () {
      test('returns document snapshot for existing receipt', () async {
        // Create a test receipt
        final testReceipt = Receipt(
          id: 'get-receipt-test',
          status: 'draft',
          restaurantName: 'Test Store',
          createdAt: Timestamp.now(),
        );
        
        // Save the receipt
        await firestoreService.saveReceipt(receiptId: testReceipt.id, data: testReceipt.toMap());
        
        // Call getReceipt
        final docSnapshot = await firestoreService.getReceipt('get-receipt-test');
        
        // Verify document exists and has correct data
        expect(docSnapshot.exists, isTrue, reason: 'Document should exist');
        expect(docSnapshot.id, 'get-receipt-test', reason: 'Document ID should match');
        
        // Cast data to appropriate type to access members safely
        final data = docSnapshot.data() as Map<String, dynamic>?;
        expect(data?['metadata']?['restaurant_name'], 'Test Store');
      });
      
      test('returns non-existent document for invalid receipt ID', () async {
        // Call getReceipt with a non-existent ID
        final docSnapshot = await firestoreService.getReceipt('non-existent-id');
        
        // Verify document doesn't exist
        expect(docSnapshot.exists, isFalse, reason: 'Document should not exist');
        expect(docSnapshot.id, 'non-existent-id', reason: 'Document ID should match regardless of existence');
      });
      
      test('uses the correct document path', () async {
        // Save a receipt using direct Firestore access at a specific path
        final receiptData = {
          'metadata': {
            'restaurant_name': 'Path Test Store',
            'status': 'draft',
            'created_at': Timestamp.now(),
          }
        };
        
        // Use direct Firestore access to insert a document
        await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('path-test-id')
            .set(receiptData);
        
        // Now try to retrieve it using the service method
        final docSnapshot = await firestoreService.getReceipt('path-test-id');
        
        // Verify it was found at the correct path
        expect(docSnapshot.exists, isTrue, reason: 'Document should exist');
        expect(docSnapshot.id, 'path-test-id', reason: 'Document ID should match');
        
        // Cast data to appropriate type to access members safely
        final data = docSnapshot.data() as Map<String, dynamic>?;
        expect(data?['metadata']?['restaurant_name'], 'Path Test Store');
      });
    });
    
    group('deleteReceipt method', () {
      test('removes an existing receipt from Firestore', () async {
        // Create a test receipt
        final testReceipt = Receipt(
          id: 'delete-test',
          status: 'draft',
          restaurantName: 'Delete Test Store',
          createdAt: Timestamp.now(),
        );
        
        // Save the receipt
        await firestoreService.saveReceipt(receiptId: testReceipt.id, data: testReceipt.toMap());
        
        // Verify receipt exists before deleting
        final beforeSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('delete-test')
            .get();
        expect(beforeSnapshot.exists, isTrue, reason: 'Document should exist before deletion');
        
        // Delete the receipt
        await firestoreService.deleteReceipt('delete-test');
        
        // Verify receipt no longer exists
        final afterSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('delete-test')
            .get();
        expect(afterSnapshot.exists, isFalse, reason: 'Document should not exist after deletion');
      });
      
      test('silently completes when deleting non-existent receipt', () async {
        // Delete a non-existent receipt - should not throw error
        await expectLater(
          firestoreService.deleteReceipt('non-existent-delete'),
          completes,
          reason: 'Should complete normally even for non-existent document',
        );
      });
      
      test('deletes at the correct document path', () async {
        // Use direct Firestore access to insert a document
        await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('path-delete-test')
            .set({
              'metadata': {
                'status': 'draft',
                'created_at': Timestamp.now(),
              }
            });
        
        // Verify document exists
        final beforeSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('path-delete-test')
            .get();
        expect(beforeSnapshot.exists, isTrue, reason: 'Document should exist before deletion');
        
        // Delete using service method
        await firestoreService.deleteReceipt('path-delete-test');
        
        // Verify document no longer exists
        final afterSnapshot = await fakeFirestoreInstance
            .collection('users')
            .doc(testUserId)
            .collection('receipts')
            .doc('path-delete-test')
            .get();
        expect(afterSnapshot.exists, isFalse, reason: 'Document should be deleted from correct path');
      });
    });
  });
}

// Removed custom emitsInOrder as flutter_test provides a built-in one.
// Ensure your test setup correctly uses it. For more complex stream scenarios,
// you might explore StreamMatcher from package:test_api or similar. 