// Mocks generated by Mockito 5.4.6 from annotations
// in billfie/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:io' as _i3;
import 'dart:ui' as _i4;

import 'package:billfie/widgets/image_state_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ImageStateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageStateManager extends _i1.Mock implements _i2.ImageStateManager {
  MockImageStateManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get pendingDeletionGsUris => (super.noSuchMethod(
        Invocation.getter(#pendingDeletionGsUris),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setNewImageFile(_i3.File? newFile) => super.noSuchMethod(
        Invocation.method(
          #setNewImageFile,
          [newFile],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetImageFile() => super.noSuchMethod(
        Invocation.method(
          #resetImageFile,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUploadedGsUris(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUploadedGsUris,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadedImageUrls(
    String? imageUrl,
    String? thumbnailUrl,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setLoadedImageUrls,
          [
            imageUrl,
            thumbnailUrl,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setActualGsUrisOnLoad(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setActualGsUrisOnLoad,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearPendingDeletionsList() => super.noSuchMethod(
        Invocation.method(
          #clearPendingDeletionsList,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUriFromPendingDeletionsList(String? uri) => super.noSuchMethod(
        Invocation.method(
          #removeUriFromPendingDeletionsList,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addUriToPendingDeletionsList(String? uri) => super.noSuchMethod(
        Invocation.method(
          #addUriToPendingDeletionsList,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
