// Mocks generated by Mockito 5.4.6 from annotations
// in billfie/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i9;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i6;

import 'package:billfie/models/person.dart' as _i13;
import 'package:billfie/models/receipt.dart' as _i4;
import 'package:billfie/models/receipt_item.dart' as _i14;
import 'package:billfie/models/split_manager.dart' as _i12;
import 'package:billfie/providers/workflow_state.dart' as _i11;
import 'package:billfie/widgets/image_state_manager.dart' as _i3;
import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFile_0 extends _i1.SmartFake implements _i2.File {
  _FakeFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_3 extends _i1.SmartFake
    implements _i2.FileSystemEntity {
  _FakeFileSystemEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_5 extends _i1.SmartFake
    implements _i2.RandomAccessFile {
  _FakeRandomAccessFile_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_6 extends _i1.SmartFake implements _i2.IOSink {
  _FakeIOSink_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_7 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageStateManager_8 extends _i1.SmartFake
    implements _i3.ImageStateManager {
  _FakeImageStateManager_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReceipt_9 extends _i1.SmartFake implements _i4.Receipt {
  _FakeReceipt_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_10<T1 extends Object?> extends _i1.SmartFake
    implements _i5.DocumentReference<T1> {
  _FakeDocumentReference_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_11 extends _i1.SmartFake
    implements _i5.SnapshotMetadata {
  _FakeSnapshotMetadata_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageStateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageStateManager extends _i1.Mock implements _i3.ImageStateManager {
  MockImageStateManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get pendingDeletionGsUris => (super.noSuchMethod(
        Invocation.getter(#pendingDeletionGsUris),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setNewImageFile(_i2.File? newFile) => super.noSuchMethod(
        Invocation.method(
          #setNewImageFile,
          [newFile],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetImageFile() => super.noSuchMethod(
        Invocation.method(
          #resetImageFile,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUploadedGsUris(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUploadedGsUris,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadedImageUrls(
    String? imageUrl,
    String? thumbnailUrl,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setLoadedImageUrls,
          [
            imageUrl,
            thumbnailUrl,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setActualGsUrisOnLoad(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setActualGsUrisOnLoad,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearPendingDeletionsList() => super.noSuchMethod(
        Invocation.method(
          #clearPendingDeletionsList,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUriFromPendingDeletionsList(String? uri) => super.noSuchMethod(
        Invocation.method(
          #removeUriFromPendingDeletionsList,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addUriToPendingDeletionsList(String? uri) => super.noSuchMethod(
        Invocation.method(
          #addUriToPendingDeletionsList,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i2.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_0(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i2.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i2.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.Directory);

  @override
  _i8.Future<_i2.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i8.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i8.Future<_i2.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i8.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i8.Future<_i2.File>);

  @override
  _i2.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_0(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i2.File);

  @override
  _i8.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i8.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_3(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i8.Future<_i2.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i8.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i8.Future<_i2.File>);

  @override
  _i2.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_0(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i2.File);

  @override
  _i8.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i8.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i8.Future<DateTime>.value(_FakeDateTime_4(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i8.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i8.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i8.Future<DateTime>.value(_FakeDateTime_4(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i8.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i8.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.RandomAccessFile> open(
          {_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i8.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i8.Future<_i2.RandomAccessFile>);

  @override
  _i2.RandomAccessFile openSync({_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i2.RandomAccessFile);

  @override
  _i8.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i2.IOSink openWrite({
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_6(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i2.IOSink);

  @override
  _i8.Future<_i10.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i8.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
      ) as _i8.Future<_i10.Uint8List>);

  @override
  _i10.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i10.Uint8List(0),
      ) as _i10.Uint8List);

  @override
  _i8.Future<String> readAsString(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  String readAsStringSync({_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i8.Future<List<String>> readAsLines(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i8.Future<_i2.File> writeAsBytes(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i8.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i8.Future<_i2.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.File> writeAsString(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i8.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i8.Future<_i2.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i8.Future<_i2.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i8.Future<_i2.FileStat>.value(_FakeFileStat_7(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i8.Future<_i2.FileStat>);

  @override
  _i2.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_7(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i2.FileStat);

  @override
  _i8.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i8.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i8.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [WorkflowState].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkflowState extends _i1.Mock implements _i11.WorkflowState {
  MockWorkflowState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ImageStateManager get imageStateManager => (super.noSuchMethod(
        Invocation.getter(#imageStateManager),
        returnValue: _FakeImageStateManager_8(
          this,
          Invocation.getter(#imageStateManager),
        ),
      ) as _i3.ImageStateManager);

  @override
  List<String> get pendingDeletionGsUris => (super.noSuchMethod(
        Invocation.getter(#pendingDeletionGsUris),
        returnValue: <String>[],
      ) as List<String>);

  @override
  int get currentStep => (super.noSuchMethod(
        Invocation.getter(#currentStep),
        returnValue: 0,
      ) as int);

  @override
  String get restaurantName => (super.noSuchMethod(
        Invocation.getter(#restaurantName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#restaurantName),
        ),
      ) as String);

  @override
  Map<String, dynamic> get parseReceiptResult => (super.noSuchMethod(
        Invocation.getter(#parseReceiptResult),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> get transcribeAudioResult => (super.noSuchMethod(
        Invocation.getter(#transcribeAudioResult),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> get assignPeopleToItemsResult => (super.noSuchMethod(
        Invocation.getter(#assignPeopleToItemsResult),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  List<String> get people => (super.noSuchMethod(
        Invocation.getter(#people),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasParseData => (super.noSuchMethod(
        Invocation.getter(#hasParseData),
        returnValue: false,
      ) as bool);

  @override
  bool get hasTranscriptionData => (super.noSuchMethod(
        Invocation.getter(#hasTranscriptionData),
        returnValue: false,
      ) as bool);

  @override
  bool get hasAssignmentData => (super.noSuchMethod(
        Invocation.getter(#hasAssignmentData),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> loadTranscriptionFromPrefs() => (super.noSuchMethod(
        Invocation.method(
          #loadTranscriptionFromPrefs,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> saveTranscriptionToPrefs() => (super.noSuchMethod(
        Invocation.method(
          #saveTranscriptionToPrefs,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void goToStep(int? step) => super.noSuchMethod(
        Invocation.method(
          #goToStep,
          [step],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void nextStep() => super.noSuchMethod(
        Invocation.method(
          #nextStep,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void previousStep() => super.noSuchMethod(
        Invocation.method(
          #previousStep,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRestaurantName(String? name) => super.noSuchMethod(
        Invocation.method(
          #setRestaurantName,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setReceiptId(String? id) => super.noSuchMethod(
        Invocation.method(
          #setReceiptId,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setImageFile(_i2.File? file) => super.noSuchMethod(
        Invocation.method(
          #setImageFile,
          [file],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetImageFile() => super.noSuchMethod(
        Invocation.method(
          #resetImageFile,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setParseReceiptResult(Map<String, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #setParseReceiptResult,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTranscribeAudioResult(Map<String, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #setTranscribeAudioResult,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAssignPeopleToItemsResult(Map<String, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #setAssignPeopleToItemsResult,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTip(double? value) => super.noSuchMethod(
        Invocation.method(
          #setTip,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTax(double? value) => super.noSuchMethod(
        Invocation.method(
          #setTax,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoading(bool? loading) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [loading],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #setErrorMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUploadedGsUris(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUploadedGsUris,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadedImageUrls(
    String? imageUrl,
    String? thumbnailUrl,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setLoadedImageUrls,
          [
            imageUrl,
            thumbnailUrl,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setActualGsUrisOnLoad(
    String? imageGsUri,
    String? thumbnailGsUri,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setActualGsUrisOnLoad,
          [
            imageGsUri,
            thumbnailGsUri,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearPendingDeletions() => super.noSuchMethod(
        Invocation.method(
          #clearPendingDeletions,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addUriToPendingDeletions(String? uri) => super.noSuchMethod(
        Invocation.method(
          #addUriToPendingDeletions,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUriFromPendingDeletions(String? uri) => super.noSuchMethod(
        Invocation.method(
          #removeUriFromPendingDeletions,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Receipt toReceipt() => (super.noSuchMethod(
        Invocation.method(
          #toReceipt,
          [],
        ),
        returnValue: _FakeReceipt_9(
          this,
          Invocation.method(
            #toReceipt,
            [],
          ),
        ),
      ) as _i4.Receipt);

  @override
  void clearParseAndSubsequentData() => super.noSuchMethod(
        Invocation.method(
          #clearParseAndSubsequentData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearTranscriptionAndSubsequentData() => super.noSuchMethod(
        Invocation.method(
          #clearTranscriptionAndSubsequentData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAssignmentAndSubsequentData() => super.noSuchMethod(
        Invocation.method(
          #clearAssignmentAndSubsequentData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SplitManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplitManager extends _i1.Mock implements _i12.SplitManager {
  MockSplitManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i13.Person> get people => (super.noSuchMethod(
        Invocation.getter(#people),
        returnValue: <_i13.Person>[],
      ) as List<_i13.Person>);

  @override
  List<_i14.ReceiptItem> get sharedItems => (super.noSuchMethod(
        Invocation.getter(#sharedItems),
        returnValue: <_i14.ReceiptItem>[],
      ) as List<_i14.ReceiptItem>);

  @override
  List<_i14.ReceiptItem> get unassignedItems => (super.noSuchMethod(
        Invocation.getter(#unassignedItems),
        returnValue: <_i14.ReceiptItem>[],
      ) as List<_i14.ReceiptItem>);

  @override
  bool get unassignedItemsWereModified => (super.noSuchMethod(
        Invocation.getter(#unassignedItemsWereModified),
        returnValue: false,
      ) as bool);

  @override
  double get totalAmount => (super.noSuchMethod(
        Invocation.getter(#totalAmount),
        returnValue: 0.0,
      ) as double);

  @override
  double get sharedItemsTotal => (super.noSuchMethod(
        Invocation.getter(#sharedItemsTotal),
        returnValue: 0.0,
      ) as double);

  @override
  double get unassignedItemsTotal => (super.noSuchMethod(
        Invocation.getter(#unassignedItemsTotal),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isStatePreserved => (super.noSuchMethod(
        Invocation.getter(#isStatePreserved),
        returnValue: false,
      ) as bool);

  @override
  List<String> get currentPeopleNames => (super.noSuchMethod(
        Invocation.getter(#currentPeopleNames),
        returnValue: <String>[],
      ) as List<String>);

  @override
  double get tipAmount => (super.noSuchMethod(
        Invocation.getter(#tipAmount),
        returnValue: 0.0,
      ) as double);

  @override
  double get taxAmount => (super.noSuchMethod(
        Invocation.getter(#taxAmount),
        returnValue: 0.0,
      ) as double);

  @override
  double get finalTotal => (super.noSuchMethod(
        Invocation.getter(#finalTotal),
        returnValue: 0.0,
      ) as double);

  @override
  set initialSplitViewTabIndex(int? _initialSplitViewTabIndex) =>
      super.noSuchMethod(
        Invocation.setter(
          #initialSplitViewTabIndex,
          _initialSplitViewTabIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tipPercentage(double? value) => super.noSuchMethod(
        Invocation.setter(
          #tipPercentage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set taxPercentage(double? value) => super.noSuchMethod(
        Invocation.setter(
          #taxPercentage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPerson(String? name) => super.noSuchMethod(
        Invocation.method(
          #addPerson,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePerson(_i13.Person? person) => super.noSuchMethod(
        Invocation.method(
          #removePerson,
          [person],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updatePersonName(
    _i13.Person? person,
    String? newName,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updatePersonName,
          [
            person,
            newName,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSharedItem(_i14.ReceiptItem? item) => super.noSuchMethod(
        Invocation.method(
          #addSharedItem,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeSharedItem(_i14.ReceiptItem? item) => super.noSuchMethod(
        Invocation.method(
          #removeSharedItem,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void assignItemToPerson(
    _i14.ReceiptItem? item,
    _i13.Person? person,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #assignItemToPerson,
          [
            item,
            person,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unassignItemFromPerson(
    _i14.ReceiptItem? item,
    _i13.Person? person,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #unassignItemFromPerson,
          [
            item,
            person,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addItemToShared(
    _i14.ReceiptItem? item,
    List<_i13.Person>? people,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addItemToShared,
          [
            item,
            people,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeItemFromShared(_i14.ReceiptItem? item) => super.noSuchMethod(
        Invocation.method(
          #removeItemFromShared,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addUnassignedItem(_i14.ReceiptItem? item) => super.noSuchMethod(
        Invocation.method(
          #addUnassignedItem,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUnassignedItem(_i14.ReceiptItem? item) => super.noSuchMethod(
        Invocation.method(
          #removeUnassignedItem,
          [item],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPersonToSharedItem(
    _i14.ReceiptItem? item,
    _i13.Person? person, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addPersonToSharedItem,
          [
            item,
            person,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePersonFromSharedItem(
    _i14.ReceiptItem? item,
    _i13.Person? person, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removePersonFromSharedItem,
          [
            item,
            person,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOriginalQuantity(
    _i14.ReceiptItem? item,
    int? quantity,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setOriginalQuantity,
          [
            item,
            quantity,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getOriginalQuantity(_i14.ReceiptItem? item) => (super.noSuchMethod(
        Invocation.method(
          #getOriginalQuantity,
          [item],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getTotalUsedQuantity(String? itemName) => (super.noSuchMethod(
        Invocation.method(
          #getTotalUsedQuantity,
          [itemName],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getAvailableQuantity(_i14.ReceiptItem? item) => (super.noSuchMethod(
        Invocation.method(
          #getAvailableQuantity,
          [item],
        ),
        returnValue: 0,
      ) as int);

  @override
  void updateItemQuantity(
    _i14.ReceiptItem? item,
    int? newQuantity,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateItemQuantity,
          [
            item,
            newQuantity,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void transferItemQuantity(
    _i14.ReceiptItem? sourceItem,
    int? quantityToTransfer,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #transferItemQuantity,
          [
            sourceItem,
            quantityToTransfer,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.ReceiptItem? findMatchingUnassignedItem(
    String? name,
    double? price,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #findMatchingUnassignedItem,
        [
          name,
          price,
        ],
      )) as _i14.ReceiptItem?);

  @override
  List<_i13.Person> getPeopleForSharedItem(_i14.ReceiptItem? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPeopleForSharedItem,
          [item],
        ),
        returnValue: <_i13.Person>[],
      ) as List<_i13.Person>);

  @override
  void setOriginalUnassignedSubtotal(double? subtotal) => super.noSuchMethod(
        Invocation.method(
          #setOriginalUnassignedSubtotal,
          [subtotal],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOriginalReviewTotal(double? subtotal) => super.noSuchMethod(
        Invocation.method(
          #setOriginalReviewTotal,
          [subtotal],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateUnassignedItem(
    _i14.ReceiptItem? itemToUpdate,
    int? newQuantity,
    double? newPrice,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateUnassignedItem,
          [
            itemToUpdate,
            newQuantity,
            newPrice,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setReceiptItems(List<_i14.ReceiptItem>? items) => super.noSuchMethod(
        Invocation.method(
          #setReceiptItems,
          [items],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void preserveState(_i12.SplitManager? other) => super.noSuchMethod(
        Invocation.method(
          #preserveState,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> generateAssignmentMap() => (super.noSuchMethod(
        Invocation.method(
          #generateAssignmentMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  double getPersonTotal(_i13.Person? person) => (super.noSuchMethod(
        Invocation.method(
          #getPersonTotal,
          [person],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i5.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i5.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_10<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i5.DocumentReference<T>);

  @override
  _i5.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_11(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i5.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}
