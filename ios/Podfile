# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

# Resolve GoogleUtilities version conflicts
pre_install do |installer|
  # Override GoogleUtilities version to avoid conflicts between Firebase and GoogleSignIn
  Pod::UI.puts "Resolving GoogleUtilities version conflicts"
  installer.pod_targets.each do |pod|
    if pod.name.eql?('GoogleUtilities/Environment') || pod.name.eql?('GoogleUtilities/Logger')
      def pod.build_type
        Pod::BuildType.static_library
      end
    end
  end
end

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Use pre-compiled FirebaseFirestore to avoid gRPC-Core and BoringSSL build issues
  pod 'FirebaseFirestore', :git => 'https://github.com/invertase/firestore-ios-sdk-frameworks.git', :tag => '10.25.0'

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  # Add the Firebase pod for Google Analytics
  pod 'FirebaseAnalytics'
  
  # For Analytics without IDFA collection capability, use this pod instead
  # pod 'FirebaseAnalytics', '~> 10.17.0', :configurations => ['Debug', 'Release']

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  # Fix non-modular headers for all targets
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
    end
    
    # Additional specific fix for BoringSSL-GRPC compiler flags
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
    
    flutter_additional_ios_build_settings(target)
    
    # Ensure iOS deployment target is set correctly
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
    end
  end
  
  # Fix Runner project too
  begin
    require 'xcodeproj'
    runner_project_path = File.expand_path("../Runner.xcodeproj", __FILE__)
    runner_project = Xcodeproj::Project.open(runner_project_path)
  
    runner_project.targets.each do |target|
      if target.name == "Runner"
        puts "Updating build settings for Runner target"
        target.build_configurations.each do |config|
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        end
      end
    end
  
    runner_project.save
    puts "Runner project updated successfully"
  rescue => e
    puts "Warning: Could not update Runner project automatically: #{e.message}"
    puts "You may need to open Xcode and set 'Allow Non-modular Includes in Framework Modules' to YES manually"
  end
end
